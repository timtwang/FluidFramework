{"version":3,"file":"rootDataObject.js","sourceRoot":"","sources":["../src/rootDataObject.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation and contributors. All rights reserved.\n * Licensed under the MIT License.\n */\nimport {\n    BaseContainerRuntimeFactory,\n    DataObject,\n    DataObjectFactory,\n    defaultRouteRequestHandler,\n} from \"@fluidframework/aqueduct\";\nimport { IContainerRuntime } from \"@fluidframework/container-runtime-definitions\";\nimport { IFluidLoadable } from \"@fluidframework/core-interfaces\";\nimport { requestFluidObject } from \"@fluidframework/runtime-utils\";\nimport {\n    ContainerSchema,\n    DataObjectClass,\n    LoadableObjectClass,\n    LoadableObjectClassRecord,\n    LoadableObjectRecord,\n    SharedObjectClass,\n} from \"./types\";\nimport { isDataObjectClass, isSharedObjectClass, parseDataObjectsFromSharedObjects } from \"./utils\";\n\nexport interface RootDataObjectProps {\n    initialObjects: LoadableObjectClassRecord;\n}\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport class RootDataObject extends DataObject<{}, RootDataObjectProps> {\n    private readonly initialObjectsDirKey = \"initial-objects-key\";\n    private readonly _initialObjects: LoadableObjectRecord = {};\n\n    private get initialObjectsDir() {\n        const dir = this.root.getSubDirectory(this.initialObjectsDirKey);\n        if (dir === undefined) {\n            throw new Error(\"InitialObjects sub-directory was not initialized\");\n        }\n        return dir;\n    }\n\n    protected async initializingFirstTime(props: RootDataObjectProps) {\n        this.root.createSubDirectory(this.initialObjectsDirKey);\n\n        // Create initial objects provided by the developer\n        const initialObjectsP: Promise<void>[] = [];\n        Object.entries(props.initialObjects).forEach(([id, objectClass]) => {\n            const createObject = async () => {\n                const obj = await this.create(objectClass);\n                this.initialObjectsDir.set(id, obj.handle);\n            };\n            initialObjectsP.push(createObject());\n        });\n\n        await Promise.all(initialObjectsP);\n    }\n\n    protected async hasInitialized() {\n        // We will always load the initial objects so they are available to the developer\n        const loadInitialObjectsP: Promise<void>[] = [];\n        for (const [key, value] of Array.from(this.initialObjectsDir.entries())) {\n            const loadDir = async () => {\n                const obj = await value.get();\n                Object.assign(this._initialObjects, { [key]: obj });\n            };\n            loadInitialObjectsP.push(loadDir());\n        }\n\n        await Promise.all(loadInitialObjectsP);\n    }\n\n    public get initialObjects(): LoadableObjectRecord {\n        if (Object.keys(this._initialObjects).length === 0) {\n            throw new Error(\"Initial Objects were not correctly initialized\");\n        }\n        return this._initialObjects;\n    }\n\n    public async create<T extends IFluidLoadable>(\n        objectClass: LoadableObjectClass<T>,\n    ): Promise<T> {\n        if (isDataObjectClass(objectClass)) {\n            return this.createDataObject<T>(objectClass);\n        } else if (isSharedObjectClass(objectClass)) {\n            return this.createSharedObject<T>(objectClass);\n        }\n        throw new Error(\"Could not create new Fluid object because an unknown object was passed\");\n    }\n\n    private async createDataObject<T extends IFluidLoadable>(dataObjectClass: DataObjectClass<T>): Promise<T> {\n        const factory = dataObjectClass.factory;\n        const packagePath = [...this.context.packagePath, factory.type];\n        const router = await this.context.containerRuntime.createDataStore(packagePath);\n        return requestFluidObject<T>(router, \"/\");\n    }\n\n    private createSharedObject<T extends IFluidLoadable>(\n        sharedObjectClass: SharedObjectClass<T>,\n    ): T {\n        const factory = sharedObjectClass.getFactory();\n        const obj = this.runtime.createChannel(undefined, factory.type);\n        return obj as unknown as T;\n    }\n}\n\nconst rootDataStoreId = \"rootDOId\";\n/**\n * The DOProviderContainerRuntimeFactory is the container code for our scenario.\n *\n * By including the createRequestHandler, we can create any droplet types we include in the registry on-demand.\n * These can then be retrieved via container.request(\"/dataObjectId\").\n */\nexport class DOProviderContainerRuntimeFactory extends BaseContainerRuntimeFactory {\n    private readonly rootDataObjectFactory; // type is DataObjectFactory\n    private readonly initialObjects: LoadableObjectClassRecord;\n    constructor(schema: ContainerSchema) {\n        const [registryEntries, sharedObjects] = parseDataObjectsFromSharedObjects(schema);\n        const rootDataObjectFactory =\n            // eslint-disable-next-line @typescript-eslint/ban-types\n            new DataObjectFactory<RootDataObject, {}, RootDataObjectProps>(\n                \"rootDO\",\n                RootDataObject,\n                sharedObjects,\n                {},\n                registryEntries,\n            );\n        super([rootDataObjectFactory.registryEntry], [], [defaultRouteRequestHandler(rootDataStoreId)]);\n        this.rootDataObjectFactory = rootDataObjectFactory;\n        this.initialObjects = schema.initialObjects;\n    }\n\n    protected async containerInitializingFirstTime(runtime: IContainerRuntime) {\n        // The first time we create the container we create the RootDataObject\n        await this.rootDataObjectFactory.createRootInstance(\n            rootDataStoreId,\n            runtime,\n            { initialObjects: this.initialObjects });\n    }\n}\n"]}