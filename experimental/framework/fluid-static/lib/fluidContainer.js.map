{"version":3,"file":"fluidContainer.js","sourceRoot":"","sources":["../src/fluidContainer.ts"],"names":[],"mappings":"AAAA;;;GAGG;AACH,OAAO,EAAE,iBAAiB,EAAE,MAAM,8BAA8B,CAAC;AAoBjE,MAAM,OAAO,cAAe,SAAQ,iBAAwC;IAKxE,YACqB,SAAoB,EACpB,cAA8B;QAE/C,KAAK,EAAE,CAAC;QAHS,cAAS,GAAT,SAAS,CAAW;QACpB,mBAAc,GAAd,cAAc,CAAgB;QANlC,qBAAgB,GAAG,GAAG,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QAChD,wBAAmB,GAAG,GAAG,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;QACtD,oBAAe,GAAG,GAAG,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QAO3D,SAAS,CAAC,EAAE,CAAC,WAAW,EAAE,IAAI,CAAC,gBAAgB,CAAC,CAAC;QACjD,SAAS,CAAC,EAAE,CAAC,QAAQ,EAAE,IAAI,CAAC,eAAe,CAAC,CAAC;QAC7C,SAAS,CAAC,EAAE,CAAC,cAAc,EAAE,IAAI,CAAC,mBAAmB,CAAC,CAAC;IAC3D,CAAC;IAED,IAAW,QAAQ;QACf,OAAO,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC;IACjC,CAAC;IAED,IAAW,SAAS;QAChB,OAAO,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC;IACpC,CAAC;IAED,IAAW,cAAc;QACrB,OAAO,IAAI,CAAC,cAAc,CAAC,cAAc,CAAC;IAC9C,CAAC;IAED;;MAEE;IACF,IAAW,QAAQ;QACf,OAAO,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC;IACnC,CAAC;IAED;;MAEE;IACF,IAAW,QAAQ;QACf,OAAO,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC;IACnC,CAAC;IAEM,KAAK,CAAC,MAAM,CAA2B,WAAmC;QAC7E,OAAO,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;IACnD,CAAC;IAEM,OAAO;QACV,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,CAAC;QACvB,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,WAAW,EAAE,IAAI,CAAC,gBAAgB,CAAC,CAAC;QACvD,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,QAAQ,EAAE,IAAI,CAAC,eAAe,CAAC,CAAC;QACnD,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,cAAc,EAAE,IAAI,CAAC,mBAAmB,CAAC,CAAC;IACjE,CAAC;CACJ","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation and contributors. All rights reserved.\n * Licensed under the MIT License.\n */\nimport { TypedEventEmitter } from \"@fluidframework/common-utils\";\nimport { Container } from \"@fluidframework/container-loader\";\nimport { IFluidLoadable } from \"@fluidframework/core-interfaces\";\nimport { IEvent, IEventProvider } from \"@fluidframework/common-definitions\";\nimport { IAudience } from \"@fluidframework/container-definitions\";\nimport { LoadableObjectClass, LoadableObjectRecord } from \"./types\";\nimport { RootDataObject } from \"./rootDataObject\";\n\nexport interface IFluidContainerEvents extends IEvent {\n    (event: \"connected\" | \"dispose\" | \"disconnected\", listener: () => void): void;\n}\n\nexport interface IFluidContainer extends IEventProvider<IFluidContainerEvents> {\n    readonly disposed: boolean;\n    readonly connected: boolean;\n    readonly initialObjects: LoadableObjectRecord;\n    create<T extends IFluidLoadable>(objectClass: LoadableObjectClass<T>): Promise<T>;\n    dispose(): void;\n}\n\nexport class FluidContainer extends TypedEventEmitter<IFluidContainerEvents> implements IFluidContainer {\n    private readonly connectedHandler = () => this.emit(\"connected\");\n    private readonly disconnectedHandler = () => this.emit(\"disconnected\");\n    private readonly disposedHandler = () => this.emit(\"disposed\");\n\n    public constructor(\n        private readonly container: Container,\n        private readonly rootDataObject: RootDataObject,\n    ) {\n        super();\n        container.on(\"connected\", this.connectedHandler);\n        container.on(\"closed\", this.disposedHandler);\n        container.on(\"disconnected\", this.disconnectedHandler);\n    }\n\n    public get disposed() {\n        return this.container.closed;\n    }\n\n    public get connected() {\n        return this.container.connected;\n    }\n\n    public get initialObjects() {\n        return this.rootDataObject.initialObjects;\n    }\n\n    /**\n    * @deprecated - Audience is being moved to the client packages\n    */\n    public get audience(): IAudience {\n        return this.container.audience;\n    }\n\n    /**\n    * @deprecated - clientId is being moved to the client packages\n    */\n    public get clientId() {\n        return this.container.clientId;\n    }\n\n    public async create<T extends IFluidLoadable>(objectClass: LoadableObjectClass<T>): Promise<T> {\n        return this.rootDataObject.create(objectClass);\n    }\n\n    public dispose() {\n        this.container.close();\n        this.container.off(\"connected\", this.connectedHandler);\n        this.container.off(\"closed\", this.disposedHandler);\n        this.container.off(\"disconnected\", this.disconnectedHandler);\n    }\n}\n"]}