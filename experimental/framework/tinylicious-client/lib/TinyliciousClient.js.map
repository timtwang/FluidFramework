{"version":3,"file":"TinyliciousClient.js","sourceRoot":"","sources":["../src/TinyliciousClient.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation and contributors. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { Container, Loader } from \"@fluidframework/container-loader\";\nimport {\n    ContainerSchema,\n    DOProviderContainerRuntimeFactory,\n    FluidContainer,\n    RootDataObject,\n} from \"@fluid-experimental/fluid-framework\";\nimport {\n    IDocumentServiceFactory,\n    IUrlResolver,\n} from \"@fluidframework/driver-definitions\";\nimport { RouterliciousDocumentServiceFactory } from \"@fluidframework/routerlicious-driver\";\nimport { requestFluidObject } from \"@fluidframework/runtime-utils\";\nimport {\n    InsecureTinyliciousTokenProvider,\n    InsecureTinyliciousUrlResolver,\n} from \"@fluidframework/tinylicious-driver\";\nimport { IRuntimeFactory } from \"@fluidframework/container-definitions\";\nimport {\n    TinyliciousConnectionConfig,\n    TinyliciousContainerConfig,\n    TinyliciousContainerServices,\n    TinyliciousResources,\n} from \"./interfaces\";\nimport { TinyliciousAudience } from \"./TinyliciousAudience\";\n\n/**\n * TinyliciousClient provides the ability to have a Fluid object backed by a Tinylicious service\n */\nexport class TinyliciousClient {\n    public readonly documentServiceFactory: IDocumentServiceFactory;\n    public readonly urlResolver: IUrlResolver;\n\n    constructor(serviceConnectionConfig?: TinyliciousConnectionConfig) {\n        const tokenProvider = new InsecureTinyliciousTokenProvider();\n        this.urlResolver = new InsecureTinyliciousUrlResolver(\n            serviceConnectionConfig?.port,\n            serviceConnectionConfig?.domain,\n        );\n        this.documentServiceFactory = new RouterliciousDocumentServiceFactory(\n            tokenProvider,\n        );\n    }\n\n    public async createContainer(\n        serviceContainerConfig: TinyliciousContainerConfig,\n        containerSchema: ContainerSchema,\n    ): Promise<TinyliciousResources> {\n        const runtimeFactory = new DOProviderContainerRuntimeFactory(\n            containerSchema,\n        );\n        const container = await this.getContainerCore(\n            serviceContainerConfig,\n            runtimeFactory,\n            true,\n        );\n        return this.getFluidContainerAndServices(container);\n    }\n\n    public async getContainer(\n        serviceContainerConfig: TinyliciousContainerConfig,\n        containerSchema: ContainerSchema,\n    ): Promise<TinyliciousResources> {\n        const runtimeFactory = new DOProviderContainerRuntimeFactory(\n            containerSchema,\n        );\n        const container = await this.getContainerCore(\n            serviceContainerConfig,\n            runtimeFactory,\n            false,\n        );\n        return this.getFluidContainerAndServices(container);\n    }\n\n    private async getFluidContainerAndServices(\n        container: Container,\n    ): Promise<TinyliciousResources>  {\n        const rootDataObject = await requestFluidObject<RootDataObject>(container, \"/\");\n        const fluidContainer: FluidContainer = new FluidContainer(container, rootDataObject);\n        const containerServices: TinyliciousContainerServices = this.getContainerServices(container);\n        const tinyliciousResources: TinyliciousResources = { fluidContainer, containerServices };\n        return tinyliciousResources;\n    }\n\n    private getContainerServices(\n        container: Container,\n    ): TinyliciousContainerServices {\n        return {\n            audience: new TinyliciousAudience(container),\n        };\n    }\n\n    private async getContainerCore(\n        tinyliciousContainerConfig: TinyliciousContainerConfig,\n        containerRuntimeFactory: IRuntimeFactory,\n        createNew: boolean,\n    ): Promise<Container> {\n        const module = { fluidExport: containerRuntimeFactory };\n        const codeLoader = { load: async () => module };\n\n        const loader = new Loader({\n            urlResolver: this.urlResolver,\n            documentServiceFactory: this.documentServiceFactory,\n            codeLoader,\n            logger: tinyliciousContainerConfig.logger,\n        });\n\n        let container: Container;\n\n        if (createNew) {\n            // We're not actually using the code proposal (our code loader always loads the same module\n            // regardless of the proposal), but the Container will only give us a NullRuntime if there's\n            // no proposal.  So we'll use a fake proposal.\n            container = await loader.createDetachedContainer({\n                package: \"no-dynamic-package\",\n                config: {},\n            });\n            await container.attach({ url: tinyliciousContainerConfig.id });\n        } else {\n            // Request must be appropriate and parseable by resolver.\n            container = await loader.resolve({ url: tinyliciousContainerConfig.id });\n        }\n        return container;\n    }\n}\n"]}