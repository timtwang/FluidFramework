{"version":3,"file":"interfaces.js","sourceRoot":"","sources":["../src/interfaces.ts"],"names":[],"mappings":"AAAA;;;GAGG","sourcesContent":["/*!\n * Copyright (c) Microsoft Corporation and contributors. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { FluidContainer, IMember, IServiceAudience } from \"@fluid-experimental/fluid-framework\";\nimport { ITelemetryBaseLogger } from \"@fluidframework/common-definitions\";\n\nexport interface TinyliciousContainerConfig {\n    id: string;\n    logger?: ITelemetryBaseLogger;\n}\n\nexport interface TinyliciousConnectionConfig {\n    port?: number;\n    domain?: string\n}\n\n/**\n * TinyliciousContainerServices is returned by the TinyliciousClient alongside a FluidContainer.\n * It holds the functionality specifically tied to the Tinylicious service, and how the data stored in\n * the FluidContainer is persisted in the backend and consumed by users. Any functionality regarding\n * how the data is handled within the FluidContainer itself, i.e. which data objects or DDSes to use,\n * will not be included here but rather on the FluidContainer class itself.\n */\nexport interface TinyliciousContainerServices {\n    /**\n     * Provides an object that can be used to get the users that are present in this Fluid session and\n     * listeners for when the roster has any changes from users joining/leaving the session\n     */\n    audience: ITinyliciousAudience;\n}\n\nexport interface TinyliciousResources {\n    fluidContainer: FluidContainer;\n    containerServices: TinyliciousContainerServices;\n}\n\n/**\n * Since Tinylicious provides user names for all of its members, we extend the IMember interface to include\n * this service-specific value. It will be returned for all audience members connected to Tinylicious.\n */\nexport interface TinyliciousMember extends IMember {\n    userName: string;\n}\n\nexport type ITinyliciousAudience = IServiceAudience<TinyliciousMember>;\n"]}